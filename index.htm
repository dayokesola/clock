<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimal-ui">
    <meta http-equiv="refresh" content="1800000">
    <title>Dayo's Cool Clock</title>
    <link rel="stylesheet" type="text/css" href="style.css?id=vdfvd">
</head>
<body>
    <div id="app" class="container">
        <div class="flex-container">
            <div class="flex-item" v-for="item in char_array">
                <span v-html="item"></span>
            </div>
        </div>
    </div>
</body>
<script src="jquery-3.7.1.min.js"></script>
<script src="vue.global.js"></script>
<script src="sugar.min.js" type="text/javascript"></script>
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GNY40TE2L7"></script>
<script type="text/javascript">
    $(document).ready(function () {
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        const { createApp } = Vue;
        var app = createApp({
            data() {
                return {
                    chars: "ITSFABOUTUTHTWENTYBTENFIFIVETQUARTERMINUTESHALFETOPASTVFIVENONETWOTHREEGFOURSIXSEVENEIGHTNINETENELEVENTWELVEOCLOCKSTIMEAFORFAOCOFFEETEALUNCHOME!",
                    time: [],
                    bg_body: "#808f85",
                    bg_on_bg: "#595959",
                    bg_on_text: "#dce0d9",
                    bg_off_bg: "#dce0d9",
                    bg_off_text: "#595959",
                    interval: 10000,
                    current_time: [],
                }
            },
            computed: {
                char_array() {
                    return this.chars.split('');
                }
            },
            methods: {
                start_clock() {
                    this.update_clock();
                    $(".flex-container div:nth-child(2)").append("'");
                    $(".flex-container div:nth-child(109)").append("'");
                    $("body").css("background-color", this.bg_body);
                    setInterval(() => {
                        this.update_clock();
                    }, this.interval);
                },
                light(char) {
                    this.time.push(char);
                },
                paintclock() {
                    //console.log(this.time);
                    let offset = 0;
                    for (var i = 0; i < this.time.length; i++) {
                        var ix = this.chars.indexOf(this.time[i].toUpperCase(), offset);
                        offset = ix;
                        for (var k = 0; k < this.time[i].length; k++) {
                            $(".flex-container div:nth-child(" + (ix + 1 + k) + ")").css("background-color", this.bg_on_bg);
                            $(".flex-container div:nth-child(" + (ix + 1 + k) + ")").css("color", this.bg_on_text);
                        }
                    }
                },
                get_current_hour(h) {
                    if (h > 12) {
                        h = h - 12;
                    }
                    let txt = "";
                    switch (h) {
                        case 1: txt = "one"; break;
                        case 2: txt = "two"; break;
                        case 3: txt = "three"; break;
                        case 4: txt = "four"; break;
                        case 5: txt = "five"; break;
                        case 6: txt = "six"; break;
                        case 7: txt = "seven"; break;
                        case 8: txt = "eight"; break;
                        case 9: txt = "nine"; break;
                        case 10: txt = "ten"; break;
                        case 11: txt = "eleven"; break;
                        case 12: txt = "twelve"; break;
                    }
                    return txt;
                },
                get_next_hour(h) {
                    var h1 = h + 1;
                    if (h1 > 12) {
                        h1 = h1 - 12;
                    }
                    return this.get_current_hour(h1);
                },
                async update_clock() {
                    var dtm = new Date();
                    var hr = dtm.getHours(); // Sugar.String.toNumber(Sugar.Date.format(dtm, '%I'));
                    var min = Sugar.String.toNumber(Sugar.Date.format(dtm, '{m}'));
                    var sec = Sugar.String.toNumber(Sugar.Date.format(dtm, '{s}'));
                    var mili = Sugar.String.toNumber(Sugar.Date.format(dtm, '{HH}{mm}'));
                    this.time = [];
                    //console.log(`hr: ${hr}, min: ${min}, sec: ${sec}, mili: ${mili}`);
                    $(".flex-container").children().css("background-color", this.bg_off_bg);
                    $(".flex-container").children().css("color", this.bg_off_text);
                    this.light('its');
                    this.light('about');
                    switch (true) {
                        case (min < 3):
                            this.light(this.get_current_hour(hr));
                            this.light('oclock');
                            break;
                        case (min < 8):
                            this.light('five');
                            this.light('minutes');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 13):
                            this.light('ten');
                            this.light('minutes');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 18):
                            this.light('quarter');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 23):
                            this.light('twenty');
                            this.light('minutes');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 28):
                            this.light('twenty');
                            this.light('five');
                            this.light('minutes');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 33):
                            this.light('half');
                            this.light('past');
                            this.light(this.get_current_hour(hr));
                            break;
                        case (min < 38):
                            this.light('twenty');
                            this.light('five');
                            this.light('minutes');
                            this.light('to');
                            this.light(this.get_next_hour(hr));
                            break;
                        case (min < 43):
                            this.light('twenty');
                            this.light('minutes');
                            this.light('to');
                            this.light(this.get_next_hour(hr));
                            break;
                        case (min < 48):
                            this.light('quarter');
                            this.light('to');
                            this.light(this.get_next_hour(hr));
                            break;
                        case (min < 53):
                            this.light('ten');
                            this.light('minutes');
                            this.light('to');
                            this.light(this.get_next_hour(hr));
                            break;
                        case (min < 58):
                            this.light('five');
                            this.light('minutes');
                            this.light('to');
                            this.light(this.get_next_hour(hr));
                            break;
                        case (min < 60):
                            this.light(this.get_next_hour(hr));
                            this.light('oclock');
                            break;
                    }
                    if (mili >= 800 && mili <= 900) {
                        this.light('time');
                        this.light('for');
                        this.light('a');
                        this.light('coffee');
                    }
                    if (mili >= 1300 && mili <= 1400) {
                        this.light('time');
                        this.light('for');
                        this.light('lunch');
                    }
                    if (mili >= 1500 && mili <= 1600) {
                        this.light('time');
                        this.light('for');
                        this.light('tea');
                    }
                    if (mili >= 1800 && mili <= 2000) {
                        this.light('time');
                        this.light('for');
                        this.light('home!');
                    }
                    //if (!Sugar.Array.isEqual(this.current_time, this.time)) {
                    // if (true) {
                    //     console.log(`befor: ${this.current_time}\nafter: ${this.time}`);
                    //     this.current_time = this.time;
                    //     await this.chime();
                    // }
                    // else {
                    //     this.paintclock();
                    // }
                    this.paintclock();
                },
                async chime() {
                    let bits = this.rando(1, this.chars.length - 1, 60);

                    console.log(`bits: ${bits}`);
                    for (var k = 0; k < bits.length; k++) {
                        $(".flex-container div:nth-child(" + bits[k] + ")").animate({ "background-color": this.bg_on_bg }, 10);
                        $(".flex-container div:nth-child(" + bits[k] + ")").animate({ "color": this.bg_on_text });

                        await sleep(10);
                        $(".flex-container div:nth-child(" + bits[k] + ")").animate({ "background-color": this.bg_off_bg });
                        $(".flex-container div:nth-child(" + bits[k] + ")").animate({ "color": this.bg_off_text });
                    }
                    $(".flex-container").children().css("background-color", this.bg_off_bg);
                    $(".flex-container").children().css("color", this.bg_off_text);
                    this.paintclock();
                },
                rando(min, max, count) {
                    // let random = [];
                    // for (let i = 0; i < count; i++) {
                    //     let n = Math.floor(Math.random() * (max - min + 1)) + min;
                    //     random.push(n);
                    // }
                    // return random;

                    let random = [];
                    for (let i = min; i <= max; i++) {
                        random.push(i);
                    }
                    return Sugar.Array.shuffle(random);
                }
            },
            mounted() {
                this.start_clock()
            }
        });
        app.mount('#app');
    });
</script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'G-GNY40TE2L7');
</script>
</html>